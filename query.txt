GitHub Repo:
https://github.com/cis550-group7/AwesomeTicketMasterPlus


############### Query & Description ###############

- Homepage -

1. Search top 100 artists with the most events

SELECT a.name, p.artistId, COUNT(*) AS event_num
FROM Participation p
JOIN Artists a ON a.id = p.artistId
GROUP BY p.artistId
ORDER BY event_num DESC


---------
Optimized:
WITH SubAr AS(
SELECT id, name
FROM Artists
)
SELECT SubAr.name, p.artistId, COUNT(*) AS event_num
FROM Participation p
JOIN SubAr ON SubAr.id = p.artistId
GROUP BY p.artistId
ORDER BY event_num DESC

2. Upcoming events in 30 days

SELECT id, name, date
FROM Events
WHERE DATEDIFF(CURDATE(), date) <= 30 AND DATEDIFF(CURDATE(), date) >= 0
ORDER BY date ASC;

3. Sign up

INSERT INTO Users (id, username, password, dob, email) 
VALUES 
      (value_list_id), 
      (value_list_username),
      (value_list_password), 
      (value_list_dob),
      (value_list_email); 

4. Log in 

SELECT password from User WHERE id = ""


- Artists Page -
5. Show all artists

SELECT *
FROM Artists;

6. Rank artists by event counts and show their info
--------------
Optimized to: 


WITH TEMP AS (
SELECT artistId, COUNT(*) AS numEvents
FROM Participation 
GROUP BY artistId)
SELECT A.name, A.images, A.genres, A.popularity, T.numEvents
FROM Artists A JOIN TEMP T ON T.artistId = A.id;

7. Search an artist

SELECT *
FROM Artists A
WHERE A.name = 'Justin Bieber';

8.View artist’s songs 

SELECT S.id, S.name, S.uri
FROM Songs S
JOIN Artists A ON A.Id = S.ArtistId
WHERE A.Name = 'Justin Bieber';
------
Optimized:

WITH ArtistSub AS(
SELECT id, name
FROM Artists
)
SELECT S.id, S.name, S.uri
FROM Songs S
JOIN ArtistSub ON ArtistSub.Id = S.ArtistId
WHERE ArtistSub.Name = 'Justin Bieber';


9. View artist-participated events on their event page

SELECT E.id, E.name, E.date, E.time, E.images, E.priceFrom, E.priceTo, E.venues
FROM Artists A 
JOIN Participation P ON A.id = P.artistId 
JOIN Events E ON E.id = P.eventID
WHERE A.Name = 'Justin Bieber';
--------------
Optimized to: 

WITH SubAr AS(
SELECT id, name 
FROM Artists),
Subpar AS(
SELECT P.eventID, P.artistId
FROM Participation P)
SELECT E.id, E.name, E.date, E.time, E.images, E.priceFrom, E.priceTo, E.venues
FROM Events E 
JOIN Subpar ON E.id = Subpar.eventID
JOIN SubAr ON SubAr.id = Subpar.artistId 
WHERE SubAr.name = 'Justin Bieber';


- Events Page -

10. Show all upcoming events and their corresponding venues, and order events by their dates

SELECT E.name, images, priceFrom, priceTo, date, time, address, city, state, postalCode, country
FROM Events E 
JOIN Venues V ON E.venues = V.id
WHERE date > ‘2022-11-20’
ORDER BY date;
--------------
Optimized:

WITH VenuesID AS(
SELECT id
FROM Venues)
SELECT E.name, images, priceFrom, priceTo, date, time, address, city, state, postalCode, country
FROM Events E 
JOIN VenuesID ON E.venues = VenuesID.id
WHERE E.date > ‘2022-11-20’
ORDER BY E.date;

11. Search an event based on substring of event name

SELECT id, name, date
FROM Events
WHERE name LIKE '%concert%'
ORDER BY date, name;

12. Rank events based on the popularity of the artists in the event. Popularity is measured by the number of followers of the artists.

WITH Popularity AS (
SELECT P.artistId, COUNT(*) AS pop
FROM Events E 
JOIN Participation P ON E.Id = P.EventId 
JOIN Follow F ON P.artistId = F.artistId
GROUP BY P.artistId
)
SELECT E.name, images, priceFrom, priceTo, date, time, address, city, state, postalCode, country
FROM Events E 
JOIN Venues V ON E.venues = V.id 
JOIN Popularity P ON P.id = E.id
ORDER BY pop;

############### Credential ###############

db_config = {
    "username" : "ticketmasterplus",
    "host": "database-1.cyc3xnhwrawo.us-east-1.rds.amazonaws.com",
    "port": "3306",
    "password": "Ticketplus123!"
}

